What happens when you initialize a repository? Why do you need to do it?

Initializing the repository creates a hidden file called .git.  To use git
version control, you need that file.  It contains configuration data and also
would be where the previous versions of your files reside - I think.

How is the staging area different from the working directory and the repository?
What value do yo think it offers?

The staging area acts as a intermediary so that you have a chance to edit
which files you've selected for a particular commit.  The working directory
contains all the files and can have uncommitted files in it.  The repository is
everything that is committed...?  Actually I'm a little unclear about the difference
between the working directory and repo.  I think the working directory is also the
repository.

How can you use the staging area to make sure you have one commit per logical change?

You can compare the staging area with the working directory and also compare it to
the repository.  Before making the actual commit you have to add the files that have
been changed into the staging area. You also perform git status to see which changes are
in the staging area and which are not.

What are some situations where branches would be helpful in keeping your history
organized? How would brances help?

Sometimes you'll want to expirement with changes to your code without affecting your main branch
Creating a new branch allows you to do this. You might want to do this if you are working on
more than one enhancement and would like to be able to go back to the master branch easily.

How do the diagrams help you visualize the branch structure?

By creating a diagrm you can see the time line or path of all of the commits for the project
in one snapshot.  It allows you what the branches look like in relation to each other and what
 previosu commits have been included in the tip (most current commmit) of each branch.

What is the result of merging branches together? Why do we represent it in the diagram the way
we do?

Branches combine all the commits made in each branch. In the diagram it helps to be able to see
how the branches were combined and the parent paths that lead to the two branch tips that were
merged in order to track history.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Simple merges can be done automatically, and this is conventient for the user. When the merges
have a conflict it helps to show this to the user and allow them to decide which lines/changes
to the code to keep.
